import logging
import os
import re
import traceback
from enum import Enum

import redis
from dotenv import load_dotenv
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup,
                      ReplyKeyboardMarkup, ReplyKeyboardRemove)
from telegram.ext import (CallbackQueryHandler, CommandHandler,
                          ConversationHandler, Filters, MessageHandler,
                          Updater)

from logger_handlers import TelegramLogsHandler
from persistence import RedisPersistence


logger = logging.getLogger(__file__)


class ConversationStatus(Enum):
    GET_ITEM = 0
    GET_COST = 1
    GET_CHECK = 2
    ADM_COMMANDS = 100


def get_user_bill(update, context, user_id):
    guest = context.bot_data['party']['guests'][user_id]
    text = ''
    username, firstname, lastname = guest['name']
    summary_name = f'{firstname} ' if firstname else ''
    summary_name += f'{lastname}' if lastname else ''
    summary_name += f'(@{username})' if username else ''
    text += f'–ì–æ—Å—Ç—å {summary_name}:\n'
    items = guest['orders']
    subtotal = 0
    for (item, cost) in items:
        text += f'\t{item} - {cost}—Ä—É–±.\n'
        subtotal += cost
    text += f'User total: {subtotal}—Ä—É–±.\n'
    negate_payd = '' if guest['bill_payd'] else '–Ω–µ '
    text += f'–°—á–µ—Ç {negate_payd}–æ–ø–ª–∞—á–µ–Ω.\n'
    reply_markup = None
    if not guest['bill_payd']:
        negate_sent = '' if guest['bill_sent'] else '–Ω–µ '
        text += f'–°—á–µ—Ç {negate_sent}–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n'
        keyboard = [
            [InlineKeyboardButton('‚úâ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç üßæ',
                                  callback_data=f'sendbill:{user_id}')],
            [InlineKeyboardButton('‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É üí∞',
                                  callback_data=f'closebill:{user_id}')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(chat_id=update.effective_chat.id, text=text,
                             reply_markup=reply_markup)
    return subtotal


def send_user_bill(update, context, user_id):
    guest = context.bot_data['party']['guests'][user_id]
    text = ''
    username, firstname, lastname = guest['name']
    summary_name = f'{firstname} ' if firstname else ''
    summary_name += f'{lastname}' if lastname else ''
    summary_name += f'(@{username})' if username else ''
    text += f'–ì–æ—Å—Ç—å {summary_name}:\n'
    items = guest['orders']
    subtotal = 0
    for (item, cost) in items:
        text += f'\t{item} - {cost}—Ä—É–±.\n'
        subtotal += cost
    text += f'User total: {subtotal}—Ä—É–±.\n'
    text += '–°—á–µ—Ç –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –Ω–æ–º–µ—Ä 89110327182 (–°–±–µ—Ä –∏–ª–∏ ' \
            '–¢–∏–Ω—å–∫–æ—Ñ—Ñ)\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —á–µ–∫ –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å ' \
            '—Å—é–¥–∞ –±–æ—Ç—É.\n–û–±—ã—á–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, –Ω–æ ' \
            '–µ—Å–ª–∏ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π ' \
            '–∫–∞—Ä—Ç–∏–Ω–∫—É –ë–ï–ó —Å–∂–∞—Ç–∏—è.\n'
    negate_payd = '' if guest['bill_payd'] else '–Ω–µ '
    text += f'–°—á–µ—Ç {negate_payd}–æ–ø–ª–∞—á–µ–Ω.\n'
    guest['bill_sent'] = True
    text += '–°—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n'
    context.bot.send_message(chat_id=user_id, text=text, )


def help(update, context):
    logger.debug(f'Enter help: {update=}')

    date = context.bot_data['party'].get('date', '')
    place = context.bot_data['party'].get('place', '')
    text = '–ü—Ä–∏–≤–µ—Ç!\n' \
           '–Ø —É—á–∏—Ç—ã–≤–∞—é –∑–∞–∫–∞–∑—ã –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ ' \
           f'{date} –≤ {place}\n–ï—Å–ª–∏ —Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏, —Ç–æ –ø—Ä–∏—à–ª–∏ ' \
           '–∫–æ–º–º–∞–Ω–¥—É /start'
    context.bot.send_message(chat_id=update.effective_chat.id, text=text)
    return ConversationHandler.END


def adm_help(update, context):
    logger.debug(f'Enter adm_help: {update=}')

    text = '–ü—Ä–∏–≤–µ—Ç!\n' \
           '–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç ' \
           '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º.\n –ë–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n' \
           '/startparty - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ\n' \
           '/closeparty - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å—á–µ—Ç –≤—Å–µ–º ' \
           '—É—á–∞—Å—Ç–Ω–∏–∫–∞–º, —É –∫–æ–≥–æ –æ–Ω –Ω–µ –ø–æ–≥–∞—à–µ–Ω\n' \
           '/total - –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—á–µ—Ç–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n' \
           '/party - –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤–µ—á–µ—Ä–∏–Ω–∫–µ'
    context.bot.send_message(chat_id=update.effective_chat.id, text=text)
    return ConversationStatus.ADM_COMMANDS


def start(update, context):
    logger.debug(f'Enter cmd_start: {update=}')

    user_id = update.message.from_user.id
    username = update.message.from_user['username']
    firstname = update.message.from_user['first_name']
    lastname = update.message.from_user['last_name']

    guests = context.bot_data['party']['guests']
    if user_id not in guests:
        guests[user_id] = {'name': (username, firstname, lastname),
                           'bill_sent': False,
                           'bill_payd': False,
                           'orders': [('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', 300)], }

    date = context.bot_data['party'].get('date', '')
    place = context.bot_data['party'].get('place', '')
    text = f'–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç!\n–ñ–¥–µ–º –≤–∞—Å –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ {date} –≤ {place}.\n' \
           '–≠—Ç–æ –¥–µ–º–æ –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è —É—á–µ—Ç–∞ –∑–∞–∫–∞–∑–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–µ—Ä—á–∞–π—Ç–µ ' \
           '–∑–∞ –±–∞–≥–∏).\n–û–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É –∏ —Å—É–º–º–∏—Ä—É–µ—Ç –µ–≥–æ '\
           '–æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–¥ –∫–æ–Ω–µ—Ü –≤–µ—á–µ—Ä–∞ –≤–∞–º –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω ' \
           '—Å—á–µ—Ç.\n–ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Å—É–º–º—ã –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞—à –±–æ—Ç –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç —Å–≤–æ—é '\
           '—Ä–∞–±–æ—Ç—É –∏ –∑–∞–∫–∞–∑—ã –±—É–¥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ –±–∞—Ä–æ–º.\n' \
           '–ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π, ' \
           '–∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å:'

    context.bot.send_message(chat_id=update.effective_chat.id, text=text,
                             reply_markup=ReplyKeyboardRemove(), )
    return ConversationStatus.GET_ITEM


def get_item(update, context):
    logger.debug(f'Enter save_item: {update=}')

    item = update.message.text
    context.user_data['item'] = item
    text = f'–¢—ã –∑–∞–∫–∞–∑–∞–ª(–∞):\n{item}\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –æ–±—â—É—é—Å—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö ' \
           '–ø–æ–∑–∏—Ü–∏–π. –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞.'
    context.bot.send_message(chat_id=update.effective_chat.id, text=text)
    return ConversationStatus.GET_COST


def get_cost(update, context):
    logger.debug(f'Enter save_cost: {update=}')

    if re.search(r'[^0-9]', update.message.text):
        text = '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã! –ë–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤!'
        context.bot.send_message(chat_id=update.effective_chat.id, text=text, )
        return ConversationStatus.GET_COST
    item = context.user_data['item']
    cost = update.message.text
    context.user_data['cost'] = int(cost)
    text = f'–î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º:\n–¢—ã –∑–∞–∫–∞–∑–∞–ª(–∞):\n{item}\n–°—Ç–æ–∏–º–æ—Å—Ç—å—é:\n' \
           f'{cost}—Ä—É–±.\n –ù–∞–∂–º–∏ "–î–∞", –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –∏–ª–∏ "–ù–µ—Ç", –µ—Å–ª–∏ ' \
           '—Ö–æ—á–µ—à—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑.'
    keyboard = [['–î–∞', '–ù–µ—Ç'],]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    context.bot.send_message(chat_id=update.effective_chat.id, text=text,
                             reply_markup=reply_markup, )
    return ConversationStatus.GET_CHECK


def confirm_choice(update, context):
    logger.debug(f'Enter confirm_choice: {update=}')

    if context.bot_data['party']['status'] == 'closed':
        text = '–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É, –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –±—É–¥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞ ' \
               '—Å—Ç–æ–π–∫–æ–π –±–∞—Ä–∞'
        context.bot.send_message(chat_id=update.effective_chat.id, text=text,
                                 reply_markup=ReplyKeyboardRemove(), )
        return ConversationHandler.END

    cost = context.user_data['cost']
    item = context.user_data['item']
    text = f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã –∑–∞–∫–∞–∑–∞–ª:\n{item}\n–°—Ç–æ–∏–º–æ—Å—Ç—å—é:\n{cost}\n' \
           '–°–ø—É—Å—Ç–∏—Ç–µ—Å—å –∑–∞ –∑–∞–∫–∞–∑–æ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç (–≥–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞ –º–æ–≥—É—Ç ' \
           '–≥–æ—Ç–æ–≤–∏—Ç—Å—è –¥–æ–ª—å—à–µ).\n–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–Ω–æ–≤–∞ –ø—Ä–∏—à–ª–∏—Ç–µ ' \
           '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π.'
    context.bot.send_message(chat_id=update.effective_chat.id, text=text,
                             reply_markup=ReplyKeyboardRemove(), )
    user_id = update.message.from_user.id
    username = update.message.from_user['username']
    firstname = update.message.from_user['first_name']
    lastname = update.message.from_user['last_name']

    guests = context.bot_data['party']['guests']
    user = guests.get(user_id)
    user['orders'].append((item, cost))

    summary_name = f'{firstname} ' if firstname else ''
    summary_name += f'{lastname}' if lastname else ''
    summary_name += f'(@{username})' if username else ''
    text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {summary_name}:\n' \
           f'{item} - {cost}—Ä—É–±.'
    context.bot.send_message(chat_id=context.bot_data['admin_chat_id'],
                             text=text, )
    return ConversationStatus.GET_ITEM


def decline_choice(update, context):
    logger.debug(f'Enter decline_choice: {update=}')

    text = '–û—Ç–º–µ–Ω–∞. –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ —Å–Ω–æ–≤–∞ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π.'
    context.bot.send_message(chat_id=update.effective_chat.id, text=text,
                             reply_markup=ReplyKeyboardRemove(), )
    return ConversationStatus.GET_ITEM


def forward_document(update, context):
    logger.debug(f'Enter forward_document: {update=}')

    update.message.forward(context.bot_data['admin_chat_id'])


def adm_total(update, context):
    logger.debug(f'Enter adm_total: {update=}')

    guests = context.bot_data['party']['guests']
    total = 0
    for user_id in guests:
        total += get_user_bill(update, context, user_id)
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text=f'–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –≤–µ—á–µ—Ä: {total}—Ä—É–±.')
    return ConversationStatus.ADM_COMMANDS


def adm_debtors(update, context):
    logger.debug(f'Enter adm_debtors: {update=}')

    guests = context.bot_data['party']['guests']
    total = 0
    for user_id, guest in guests.items():
        if not guest['bill_payd']:
            total += get_user_bill(update, context, user_id)
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text=f'–°—É–º–º–∞ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤: {total}—Ä—É–±.')
    return ConversationStatus.ADM_COMMANDS


def adm_sendbills(update, context):
    logger.debug(f'Enter adm_debtors: {update=}')

    guests = context.bot_data['party']['guests']
    total = 0
    for user_id, guest in guests.items():
        if not guest['bill_payd']:
            total += 1
            send_user_bill(update, context, user_id)
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text=f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total} –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤.')
    return ConversationStatus.ADM_COMMANDS


def adm_close(update, context):
    logger.debug(f'Enter adm_close: {update=}')

    context.bot_data['party']['status'] = 'closed'
    text = '–í–µ—á–µ—Ä–∏–Ω–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n' \
           '/sendbills - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç–∞ –≤—Å–µ–º, –∫—Ç–æ –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª\n' \
           '/total - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤–µ—á–µ—Ä–∏–Ω–∫–∏\n' \
           '/debtors - —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö –∫—Ç–æ –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª —Å–≤–æ–π —Å—á–µ—Ç'
    context.bot.send_message(chat_id=update.effective_chat.id, text=text, )
    return ConversationStatus.ADM_COMMANDS


def adm_start_party(update, context):
    logger.debug(f'Enter adm_start_party: {update=}')

    context.bot_data['party']['status'] = 'in progress'
    context.bot_data['party']['guests'] = {}
    context.bot.send_message(chat_id=update.effective_chat.id,
                             text='–í—Å–µ —Å—á–µ—Ç–∞ —É–¥–∞–ª–µ–Ω—ã, –≤–µ—á–µ—Ä–∏–Ω–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞.')
    return ConversationStatus.ADM_COMMANDS


def adm_party_info(update, context):
    logger.debug(f'Enter adm_party_info: {update=}')
    date = context.bot_data['party']['date']
    place = context.bot_data['party']['place']
    status = context.bot_data['party']['status']
    text = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –≤–µ—á–µ—Ä–∏–Ω–∫–µ:\n' \
           f'–î–∞—Ç–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–∏: {date}\n' \
           f'–ú–µ—Å—Ç–æ –≤–µ—á–µ—Ä–∏–Ω–∫–∏ (–≤): {place}\n' \
           f'–°—Ç–∞—Ç—É—Å –≤–µ—á–µ—Ä–∏–Ω–∫–∏: {status}'
    keyboard = [
        [InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –≤–µ—á–µ—Ä–∏–Ω–∫–∏ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)',
                              callback_data='change_party_date')],
        [InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ –≤–µ—á–µ—Ä–∏–Ω–∫–∏ (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)',
                              callback_data='change_party_place')],
        [InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å –≤–µ—á–µ—Ä–∏–Ω–∫—É',
                              callback_data='close_party')]
        if status == 'in progress' else
        [InlineKeyboardButton('–ù–∞—á–∞—Ç—å –≤–µ—á–µ—Ä–∏–Ω–∫—É',
                              callback_data='start_party')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(chat_id=update.effective_chat.id, text=text,
                             reply_markup=reply_markup)
    return ConversationStatus.ADM_COMMANDS


def adm_send_bill(update, context):
    user_id = int(update.callback_query.data.split(':')[1])
    send_user_bill(update, context, user_id)
    get_user_bill(update, context, user_id)
    return ConversationStatus.ADM_COMMANDS


def adm_close_bill(update, context):
    user_id = int(update.callback_query.data.split(':')[1])
    guest = context.bot_data['party']['guests'][user_id]
    guest['bill_payd'] = True
    text = re.sub(r'–Ω–µ –æ–ø–ª–∞—á–µ–Ω', r'–æ–ø–ª–∞—á–µ–Ω',
                  update.callback_query.message.text)
    update.callback_query.edit_message_text(text, reply_markup=None)
    return ConversationStatus.ADM_COMMANDS


def error_handler(update, context):
    logger.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:",
                 exc_info=context.error)


def main():
    load_dotenv(override=True)
    tg_token = os.getenv('TELEGRAM_BOT_TOKEN')
    admin_chat_id = int(os.getenv('TG_ADMIN_CHAT'))
    loglevel = os.getenv('LOG_LEVEL', default='INFO')
    logging.basicConfig(level=loglevel,
                        format="%(asctime)s %(levelname)s %(message)s", )
    logger.addHandler(TelegramLogsHandler(tg_token, admin_chat_id))
    logger.debug('Start logging')

    redis_host = os.getenv('REDIS_HOST')
    redis_port = os.getenv('REDIS_PORT')
    redis_password = os.getenv('REDIS_PASSWORD')

    redis_storage = redis.Redis(host=redis_host, port=redis_port,
                                password=redis_password)
    try:
        redis_storage.ping()
        persistence = RedisPersistence(redis_storage)
    except redis.ConnectionError:
        logger.warning('Redis not available. Run without persistence.')
        persistence = False

    updater = Updater(tg_token, persistence=persistence)
    dispatcher = updater.dispatcher

    dispatcher.bot_data['admin_chat_id'] = admin_chat_id
    if 'party' not in dispatcher.bot_data:
        dispatcher.bot_data['party'] = {
            'date': '09 –ú–∞—Ä—Ç–∞ 2024–≥.',
            'place': '–±–∞—Ä–µ Freedom',
            'status': 'in progress',
            'guests': {},
        }
    user_conversation = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.chat(admin_chat_id), adm_help),
            CommandHandler('start', start),
            MessageHandler(~Filters.chat(admin_chat_id), help),
        ],
        states={
            ConversationStatus.GET_ITEM: [
                MessageHandler(Filters.text, get_item),
            ],
            ConversationStatus.GET_COST: [
                MessageHandler(Filters.text, get_cost),
            ],
            ConversationStatus.GET_CHECK: [
                MessageHandler(Filters.text('–î–∞'), confirm_choice),
                MessageHandler(Filters.text('–ù–µ—Ç'), decline_choice),
            ],
            ConversationStatus.ADM_COMMANDS: [
                CommandHandler('total', adm_total,
                               Filters.chat(admin_chat_id)),
                CommandHandler('debtors', adm_debtors,
                               Filters.chat(admin_chat_id)),
                CommandHandler('sendbills', adm_sendbills,
                               Filters.chat(admin_chat_id)),
                CommandHandler('closeparty', adm_close,
                               Filters.chat(admin_chat_id)),
                CommandHandler('party', adm_party_info,
                               Filters.chat(admin_chat_id)),
                CallbackQueryHandler(adm_close, pattern=r'^close_party$'),
                CallbackQueryHandler(adm_start_party,
                                     pattern=r'^start_party$'),
                CallbackQueryHandler(adm_send_bill, pattern=r'^sendbill:\d+$'),
                CallbackQueryHandler(adm_close_bill,
                                     pattern=r'^closebill:\d+$'),
            ]
        },
        fallbacks=[
            CommandHandler('stop', help, ~Filters.chat(admin_chat_id)),
        ],
        name='party_billing_conversation',
        persistent=persistence,
    )
    dispatcher.add_handler(user_conversation)
    dispatcher.add_handler(
        MessageHandler(~Filters.chat(admin_chat_id) & Filters.document,
                       forward_document)
    )

    dispatcher.add_error_handler(error_handler)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    try:
        main()
    except Exception as error:
        logger.error({'Error': error, 'Traceback': traceback.format_exc()})
