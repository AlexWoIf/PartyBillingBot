import logging
import os
import re
from enum import Enum

from dotenv import load_dotenv
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup,
                      ReplyKeyboardMarkup, ReplyKeyboardRemove)
from telegram.ext import (CallbackQueryHandler, CommandHandler,
                          ConversationHandler, Filters, MessageHandler,
                          Updater)

logger = logging.getLogger(__file__)


class ConversationStatus(Enum):
    GET_ITEM = 0
    GET_COST = 1
    GET_CHECK = 2
    ADM_COMMANDS = 100


def help(update, context):
    logger.debug(f'Enter help: {update=}')

    date = context.bot_data['party'].get('date', '')
    place = context.bot_data['party'].get('place', '')
    text = '–ü—Ä–∏–≤–µ—Ç!\n' \
           '–Ø —É—á–∏—Ç—ã–≤–∞—é –∑–∞–∫–∞–∑—ã –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ ' \
           f'{date} –≤ {place}\n–ï—Å–ª–∏ —Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏, —Ç–æ –ø—Ä–∏—à–ª–∏ ' \
           '–∫–æ–º–º–∞–Ω–¥—É /start'
    update.message.reply_text(text)


def adm_help(update, context):
    logger.debug(f'Enter adm_help: {update=}')

    text = '–ü—Ä–∏–≤–µ—Ç!\n' \
           '–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç ' \
           '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º.\n –ë–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n' \
           '/startparty - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ\n' \
           '/closeparty - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å—á–µ—Ç –≤—Å–µ–º ' \
           '—É—á–∞—Å—Ç–Ω–∏–∫–∞–º, —É –∫–æ–≥–æ –æ–Ω –Ω–µ –ø–æ–≥–∞—à–µ–Ω\n' \
           '/total - –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—á–µ—Ç–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n' \
           '/party - –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤–µ—á–µ—Ä–∏–Ω–∫–µ'
    update.message.reply_text(text)
    return ConversationStatus.ADM_COMMANDS


def start(update, context):
    logger.debug(f'Enter cmd_start: {update=}')

    user_id = update.message.from_user.id
    username = update.message.from_user['username']
    firstname = update.message.from_user['first_name']
    lastname = update.message.from_user['last_name']

    guests = context.bot_data['party']['guests']
    guests[user_id] = {'name': (username, firstname, lastname),
                       'bill_sent': False,
                       'bill_payd': False,
                       'orders': [], }

    date = context.bot_data['party'].get('date', '')
    place = context.bot_data['party'].get('place', '')
    text = '–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –∫ –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!\n' \
           f'–Ø —É—á–∏—Ç—ã–≤–∞—é –∑–∞–∫–∞–∑—ã –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ {date} –≤ {place}\n' \
           '–ü—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —Ç—ã –¥–µ–ª–∞–µ—à—å –∑–∞–∫–∞–∑, –∏ –≤ ' \
           '–∫–æ–Ω—Ü–µ –≤–µ—á–µ—Ä–∞ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ç–≤–æ–π —Å—á–µ—Ç.\n' \
           '–ù–∞–ø–∏—à–∏ –º–Ω–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≥–æ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å:'
    context.bot.send_message(chat_id=update.effective_chat.id, text=text,
                             reply_markup=ReplyKeyboardRemove(), )
    return ConversationStatus.GET_ITEM


def get_item(update, context):
    logger.debug(f'Enter save_item: {update=}')

    item = update.message.text
    context.user_data['item'] = item
    text = f'–¢—ã –∑–∞–∫–∞–∑–∞–ª:\n{item}\n–ù–∞–ø–∏—à–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å, ' \
           '—á—Ç–æ–±—ã –º—ã –ø–æ—Ç–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª–∏–ª–∏ –∏—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç –Ω–∞ –≤—Å–µ—Ö.'
    context.bot.send_message(chat_id=update.effective_chat.id, text=text)
    return ConversationStatus.GET_COST


def get_cost(update, context):
    logger.debug(f'Enter save_cost: {update=}')

    if re.search(r'[^0-9]', update.message.text):
        text = '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã! –ë–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤!'
        context.bot.send_message(chat_id=update.effective_chat.id, text=text, )
        return ConversationStatus.GET_COST
    item = context.user_data['item']
    cost = update.message.text
    context.user_data['cost'] = int(cost)
    text = f'–î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º:\n–¢—ã –∑–∞–∫–∞–∑–∞–ª: {item}\n–°—Ç–æ–∏–º–æ—Å—Ç—å:\n{cost}—Ä—É–±.\n' \
           '–ù–∞–∂–º–∏ "–î–∞", –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –∏–ª–∏ "–ù–µ—Ç", –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å ' \
           '–∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ'
    keyboard = [['–î–∞', '–ù–µ—Ç'],]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    context.bot.send_message(chat_id=update.effective_chat.id, text=text,
                             reply_markup=reply_markup, )
    return ConversationStatus.GET_CHECK


def confirm_choice(update, context):
    logger.debug(f'Enter confirm_choice: {update=}')

    cost = context.user_data['cost']
    item = context.user_data['item']
    text = f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã –∑–∞–∫–∞–∑–∞–ª:\n{item}\n–°—Ç–æ–∏–º–æ—Å—Ç—å:\n{cost}\n' \
           '–Ø –∑–∞–ø–∏—Å–∞–ª –∑–∞–∫–∞–∑ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∏ —É—á—Ç—É –µ–≥–æ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ —Å—á–µ—Ç–∞.\n' \
           '–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ, —Ç–æ –æ–ø—è—Ç—å –ø—Ä–∏—Å—ã–ª–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ.'
    context.bot.send_message(chat_id=update.effective_chat.id, text=text,
                             reply_markup=ReplyKeyboardRemove(), )
    user_id = update.message.from_user.id
    username = update.message.from_user['username']
    firstname = update.message.from_user['first_name']
    lastname = update.message.from_user['last_name']

    guests = context.bot_data['party']['guests']
    user = guests.get(user_id)
    user['orders'].append((item, cost))

    summary_name = f'{firstname} ' if firstname else ''
    summary_name += f'{lastname}' if lastname else ''
    summary_name += f'(@{username})' if username else ''
    text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {summary_name}:\n' \
           f'{item} - {cost}—Ä—É–±.'
    context.bot.send_message(chat_id=context.bot_data['admin_chat_id'],
                             text=text, )
    return ConversationStatus.GET_ITEM


def decline_choice(update, context):
    logger.debug(f'Enter decline_choice: {update=}')

    text = '–û–∫. –û—Ç–º–µ–Ω—è–µ–º. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.'
    context.bot.send_message(chat_id=update.effective_chat.id, text=text,
                             reply_markup=ReplyKeyboardRemove(), )
    return ConversationStatus.GET_ITEM


def adm_total(update, context):
    guests = context.bot_data['party']['guests']
    total = 0
    for user_id, guest in guests.items():
        text = ''
        username, firstname, lastname = guest['name']
        summary_name = f'{firstname} ' if firstname else ''
        summary_name += f'{lastname}' if lastname else ''
        summary_name += f'(@{username})' if username else ''
        text += f'–ì–æ—Å—Ç—å {summary_name}:\n'
        items = guest['orders']
        subtotal = 0
        for (item, cost) in items:
            text += f'\t{item} - {cost}—Ä—É–±.\n'
            subtotal += cost
        text += f'User total: {subtotal}—Ä—É–±.\n'
        total += subtotal
        negate_payd = '' if guest['bill_payd'] else '–Ω–µ '
        text += f'–°—á–µ—Ç {negate_payd}–æ–ø–ª–∞—á–µ–Ω.\n'
        if not guest['bill_payd']:
            negate_sent = '' if guest['bill_sent'] else '–Ω–µ '
            text += f'–°—á–µ—Ç {negate_sent}–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n'
        keyboard = [
            [InlineKeyboardButton('‚úâ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç üßæ',
                                  callback_data=f'sendbill:{user_id}')],
            [InlineKeyboardButton('‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É üí∞',
                                  callback_data=f'closebill:{user_id}')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(text, reply_markup=reply_markup)
    update.message.reply_text(f'–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –≤–µ—á–µ—Ä: {total}—Ä—É–±.')


def adm_close(update, context):
    context.bot_data['party']['status'] = 'closed'
    guests = context.bot_data['party']['guests']
    total = 0
    for user_id, guest in guests.items():
        text = ''
        username, firstname, lastname = guest['name']
        summary_name = f'{firstname} ' if firstname else ''
        summary_name += f'{lastname}' if lastname else ''
        summary_name += f'(@{username})' if username else ''
        text += f'–ì–æ—Å—Ç—å {summary_name}:\n'
        items = guest['orders']
        subtotal = 0
        for (item, cost) in items:
            text += f'\t{item} - {cost}—Ä—É–±.\n'
            subtotal += cost
        text += f'User total: {subtotal}—Ä—É–±.\n'
        total += subtotal
        negate_payd = '' if guest['bill_payd'] else '–Ω–µ '
        text += f'–°—á–µ—Ç {negate_payd}–æ–ø–ª–∞—á–µ–Ω.\n'
        reply_markup = None
        if not guest['bill_payd']:
            text += '–°—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n'
            context.bot.send_message(chat_id=user_id, text=text)
            keyboard = [
                [InlineKeyboardButton('‚úâ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç üßæ',
                                      callback_data=f'sendbill:{user_id}')],
                [InlineKeyboardButton('‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É üí∞',
                                      callback_data=f'closebill:{user_id}')],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(text, reply_markup=reply_markup)
    update.message.reply_text(f'–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –≤–µ—á–µ—Ä: {total}—Ä—É–±.')


def send_bill(update, context):
    user_id = int(update.callback_query.data.split(':')[1])
    guest = context.bot_data['party']['guests'][user_id]
    guest['bill_sent'] = True
    text = re.sub(r'–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', r'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                  update.callback_query.message.text)
    context.bot.send_message(chat_id=user_id, text=text)
    update.callback_query.edit_message_text(text)


def close_bill(update, context):
    user_id = int(update.callback_query.data.split(':')[1])
    guest = context.bot_data['party']['guests'][user_id]
    guest['bill_payd'] = True
    text = re.sub(r'–Ω–µ –æ–ø–ª–∞—á–µ–Ω', r'–æ–ø–ª–∞—á–µ–Ω',
                  update.callback_query.message.text)
    update.callback_query.edit_message_text(text, reply_markup=None)


if __name__ == '__main__':
    load_dotenv()
    tg_token = os.getenv('TELEGRAM_BOT_TOKEN')
    loglevel = os.getenv('LOG_LEVEL', default='INFO')
    logging.basicConfig(level=loglevel,
                        format="%(asctime)s %(levelname)s %(message)s", )
    logger.debug('Start logging')

    updater = Updater(tg_token)
    dispatcher = updater.dispatcher

    admin_chat_id = int(os.getenv('TG_ADMIN_CHAT'))
    dispatcher.bot_data['admin_chat_id'] = admin_chat_id
    dispatcher.bot_data['party'] = {
        'date': '09 –ú–∞—Ä—Ç–∞ 2024–≥.',
        'place': '–±–∞—Ä–µ Freedom',
        'status': 'in progress',
        'guests': {},
    }
    user_conversation = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.chat(admin_chat_id), adm_help),
            CommandHandler('start', start),
            MessageHandler(~Filters.chat(admin_chat_id), help),
        ],
        states={
            ConversationStatus.GET_ITEM: [
                MessageHandler(Filters.text, get_item),
            ],
            ConversationStatus.GET_COST: [
                MessageHandler(Filters.text, get_cost),
            ],
            ConversationStatus.GET_CHECK: [
                MessageHandler(Filters.text('–î–∞'), confirm_choice),
                MessageHandler(Filters.text('–ù–µ—Ç'), decline_choice),
            ],
            ConversationStatus.ADM_COMMANDS: [
                CommandHandler('total', adm_total,
                               Filters.chat(admin_chat_id)),
                CommandHandler('closeparty', adm_close,
                               Filters.chat(admin_chat_id)),
                CallbackQueryHandler(send_bill, pattern=r'^sendbill:\d+$'),
                CallbackQueryHandler(close_bill, pattern=r'^closebill:\d+$'),
            ]
        },
        fallbacks=[],
        name='party_billing_conversation',
        # persistent=True,
    )
    dispatcher.add_handler(user_conversation)

    updater.start_polling()
    updater.idle()
